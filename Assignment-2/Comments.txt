Here, buckets is an array of List objects, each of which contains the key-value pairs that hash to the same index. The getIndex() method calculates the index for a given key using the hashCode() method of the key object, and the put() method adds a key-value pair to the appropriate bucket. If the bucket does not yet exist, it is created. If the size of the dictionary exceeds a certain threshold (LOAD_FACTOR), the resize() method is called to double the capacity of the dictionary and rehash all the key-value pairs. The get() method retrieves the value associated with a given key, the remove() method removes a key-value pair from

Here, table is an array of Entry objects, each of which contains a key-value pair. The getIndex() method calculates the index for a given key using the hashCode() method of the key object, and the put() method attempts to add a key-value pair to the table. If the table is full at the calculated index, the method uses quadratic probing to search for the next available slot. The get() method retrieves the value associated with a given key, the remove() method removes